const char* se_coherence_solver_help = 
"Seismic Engine ---- Coherence Module\n"
"Program Name: se_coherence_solver\n"
"Description: This program creates and computes a coherence cube from seismic data.\n"
"Usage: ./se_coherence_solver par=parfile\n"
"\n"
"Parameters:\n"
"- nx: int, default=100, Number of samples in x direction.\n"
"- ny: int, default=100, Number of samples in y direction.\n"
"- nt: int, default=100, Number of samples in t direction.\n"
"- dx: float, default=10.0, Sampling interval in x direction.\n"
"- dy: float, default=10.0, Sampling interval in y direction.\n"
"- dt: float, default=0.004, Sampling interval in t direction.\n"
"- half_window_x: int, default=1, Half window size in x direction.\n"
"- half_window_y: int, default=1, Half window size in y direction.\n"
"- half_window_t: int, default=4, Half window size in t direction.\n"
"- type: int, default=0, Type of coherence computation.\n"
" 0: Semblance, 1: Variation0, 2: Variation1, 3: Variation2 4: Eigen\n"
"- dip_type: int, default=0, dip correct flag.\n"
" 0: no_dip, 1: dip\n"
"- half_dip_window: int, default=2, Half dip window size.\n"
"- along_layer: int, default=0, Flag to compute coherence along a layer.\n"
"- layer_file: string, default=\"layer.txt\", Input layer file name.\n"
"- layer_result_file: string, default=\"layer_result.txt\", Output layer result file name.\n"
"- data_cube_file: string, default=\"inputfile\", Input data cube file name.\n"
"- coherence_cube_file: string, default=\"coherencefile\", Output coherence cube file name.\n"
"\n"
"     _______. _______ \n"
"    /       ||   ____|\n"
"   |   (----`|  |__   \n"
"    \\   \\    |   __|  \n"
".----)   |   |  |____ \n"
"|_______/    |_______|\n"
"\n";

const char* se_coherence_cut_slice_help = 
"Seismic Engine ---- Coherence Module\n"
"Program Name: se_coherence_cut_slice\n"
"Description: This program cuts a slice from a coherence cube along a specified direction.\n"
"Usage: ./se_coherence_cut_slice par=parfile\n"
"\n"
"Parameters:\n"
"- coherence_cube_file: string, default=\"coherence_cube.bin\", Input coherence cube file name.\n"
"- nx: int, default=100, Number of samples in x direction.\n"
"- ny: int, default=100, Number of samples in y direction.\n"
"- nz: int, default=100, Number of samples in z direction.\n"
"- direction: int, default=2, Direction to cut the slice (0: x, 1: y, 2: z).\n"
"- cutpoint: int, default=50, Point at which to cut the slice.\n"
"\n"
"     _______. _______ \n"
"    /       ||   ____|\n"
"   |   (----`|  |__   \n"
"    \\   \\    |   __|  \n"
".----)   |   |  |____ \n"
"|_______/    |_______|\n"
"\n";

const char* se_coherence_cut_cube_help = 
"Seismic Engine ---- Coherence Module\n"
"Program Name: se_coherence_cut_cube\n"
"Description: This program cuts a sub-cube from a coherence cube.\n"
"Usage: ./se_coherence_cut_cube par=parfile\n"
"\n"
"Parameters:\n"
"- coherence_cube_file: string, default=\"coherence_cube.bin\", Input coherence cube file name.\n"
"- nx: int, default=100, Number of samples in x direction.\n"
"- ny: int, default=100, Number of samples in y direction.\n"
"- nz: int, default=100, Number of samples in z direction.\n"
"- n1: int, default=10, Size of the sub-cube in x direction.\n"
"- n2: int, default=10, Size of the sub-cube in y direction.\n"
"- n3: int, default=10, Size of the sub-cube in z direction.\n"
"- no1: int, default=0, Offset in x direction.\n"
"- no2: int, default=0, Offset in y direction.\n"
"- no3: int, default=0, Offset in z direction.\n"
"\n"
"     _______. _______ \n"
"    /       ||   ____|\n"
"   |   (----`|  |__   \n"
"    \\   \\    |   __|  \n"
".----)   |   |  |____ \n"
"|_______/    |_______|\n"
"\n";

const char* se_interplatation_2d_help = 
"Seismic Engine ---- Interplatation Module\n"
"Program Name: se_interplatation_2d\n"
"Description: This program interpolates data to create a 2D profile.\n"
"Usage: ./se_interplatation_2d par=parfile\n"
"\n"
"Parameters:\n"
"- n1: int, default=100, Number of samples in the first axis.\n"
"- n2: int, default=100, Number of samples in the second axis.\n"
"- axis1: int, default=1, First axis for interpolation (1, 2, or 3).\n"
"- axis2: int, default=2, Second axis for interpolation (1, 2, or 3).\n"
"- layer_fname: string, default=\"layer.txt\", Input layer file name.\n"
"- layer_interplatation_fname: string, default=\"layer_interplatation.bin\", Output interpolated layer file name.\n"
"\n"
"     _______. _______ \n"
"    /       ||   ____|\n"
"   |   (----`|  |__   \n"
"    \\   \\    |   __|  \n"
".----)   |   |  |____ \n"
"|_______/    |_______|\n"
"\n";

const char* se_layer_generator_help = 
"Seismic Engine ---- Layer Generator Module\n"
"Program Name: se_layer_generator\n"
"Description: This program generates a layer file by cutting along a specified direction.\n"
"Usage: ./se_layer_generator par=parfile\n"
"\n"
"Parameters:\n"
"- nx: int, default=100, Number of samples in x direction.\n"
"- ny: int, default=100, Number of samples in y direction.\n"
"- nt: int, default=100, Number of samples in t direction.\n"
"- direction: int, default=2, Direction to cut the layer (0: x, 1: y, 2: z).\n"
"- cut_point: int, default=50, Point at which to cut the layer.\n"
"- layer_fname: string, default=\"layer.txt\", Output layer file name.\n"
"\n"
"     _______. _______ \n"
"    /       ||   ____|\n"
"   |   (----`|  |__   \n"
"    \\   \\    |   __|  \n"
".----)   |   |  |____ \n"
"|_______/    |_______|\n"
"\n";
